k
dim(HR_locations)
### step 1. sample n_points frolm imgLR
sampled_points <- sample(LR_nrow * LR_ncol, n_points)
sampled_locations <- lapply(sampled_points, locate, LR_ncol) # locations in the imgLR matrix
HR_locations <- lapply(sampled_locations, d_m1) # corresponding locations in the imgHR matrix
new_locations <- lapply(sampled_locations, add1) # locations in the supp matrix
# supplement the image matrix
supp_imgLR <- cbind(imgLR[, 1, k], imgLR[, , k], imgLR[, LR_ncol, k])
supp_imgLR <- rbind(cbind(imgLR[1, 1, k], imgLR[1, , k],imgLR[1, LR_ncol, k]),
supp_imgLR, cbind(imgLR[LR_nrow, 1, k], imgLR[LR_nrow, , k],imgLR[LR_nrow, LR_ncol, k]))
dim(HR_locations)
HR_locations
head(HR_locations)
vector[2] = 2
######## optimization computation
distribute1 <- function(vector){
vector[1] = 1
vector[2] = 2
}
######## optimization computation
distribute1 <- function(vector){
vector[1] = 1
vector[2] = 2
return(vector)
}
lapply(HR_locations, distribute1)
HR_locations <- lapply(sampled_locations, d_m1) # corresponding locations in the imgHR matrix
######## optimization computation
distribute1 <- function(vector){
row_index <- vector[1]
col_index <- vector[2]
cent_value <- supp_imgLR[row_index, col_index]
return(c(supp_imgLR[row_index - 1, col_index - 1] - cent_value,
supp_imgLR[row_index - 1, col_index] - cent_value,
supp_imgLR[row_index - 1, col_index + 1] - cent_value,
supp_imgLR[row_index, col_index - 1] - cent_value,
supp_imgLR[row_index, col_index + 1] - cent_value,
supp_imgLR[row_index + 1, col_index - 1] - cent_value,
supp_imgLR[row_index + 1, col_index] - cent_value,
supp_imgLR[row_index + 1, col_index + 1] - cent_value))
}
lapply(new_locations, distribute1)
length(lapply(new_locations, distribute1))
lapply(new_locations, distribute1)
lapply(new_locations, distribute1)[[1]]
HR_locations <- sapply(sampled_locations, d_m1) # corresponding locations in the imgHR matrix
HR_locations
head
head(HR_locations)
sampled_locations <- sapply(sampled_points, locate, LR_ncol) # locations in the imgLR matrix
sampled_locations
head(sampled_locations,1)
sampled_locations <- apply(sampled_points, locate, LR_ncol) # locations in the imgLR matrix
sampled_locations[1]
sampled_locations[1,2]
sampled_locations[3]
dim(sampled_locations)
t(sampled_locations)
sampled_locations <- t(sapply(sampled_points, locate, LR_ncol)) # locations in the imgLR matrix
sampled_locations
HR_locations <- sapply(sampled_locations, d_m1) # corresponding locations in the imgHR matrix
HR_locations
class(sampled_locations)
sampled_locations + 1
sampled_locations
HR_locations <- sampled_locations + 1 # corresponding locations in the imgHR matrix
new_locations <- 2 * sampled_locations - 1 # locations in the supp matrix
new_locations
apply(new_locations, 1, distribute1)
new_locations
new_locations[1]
new_locations[1, ]
new_locations[1, ][1]
apply(new_locations, 1, distribute1)
# supplement the image matrix
supp_imgLR <- cbind(imgLR[, 1, k], imgLR[, , k], imgLR[, LR_ncol, k])
supp_imgLR <- rbind(cbind(imgLR[1, 1, k], imgLR[1, , k],imgLR[1, LR_ncol, k]),
supp_imgLR, cbind(imgLR[LR_nrow, 1, k], imgLR[LR_nrow, , k],imgLR[LR_nrow, LR_ncol, k]))
apply(new_locations, 1, distribute1)
vector = new_locations[1, ]
vector
row_index <- vector[1]
col_index <- vector[2]
cent_value <- supp_imgLR[row_index, col_index]
return(c(supp_imgLR[row_index - 1, col_index - 1] - cent_value,
supp_imgLR[row_index - 1, col_index] - cent_value,
supp_imgLR[row_index - 1, col_index + 1] - cent_value,
supp_imgLR[row_index, col_index - 1] - cent_value,
supp_imgLR[row_index, col_index + 1] - cent_value,
supp_imgLR[row_index + 1, col_index - 1] - cent_value,
supp_imgLR[row_index + 1, col_index] - cent_value,
supp_imgLR[row_index + 1, col_index + 1] - cent_value))
c(supp_imgLR[row_index - 1, col_index - 1] - cent_value,
supp_imgLR[row_index - 1, col_index] - cent_value,
supp_imgLR[row_index - 1, col_index + 1] - cent_value,
supp_imgLR[row_index, col_index - 1] - cent_value,
supp_imgLR[row_index, col_index + 1] - cent_value,
supp_imgLR[row_index + 1, col_index - 1] - cent_value,
supp_imgLR[row_index + 1, col_index] - cent_value,
supp_imgLR[row_index + 1, col_index + 1] - cent_value)
test <- function(vec){
return(vec[1], vec[2], vec[1] + 1)
}
apply(new_locations, 1, test)
return(c(vec[1], vec[2], vec[1] + 1))
test <- function(vec){
return(c(vec[1], vec[2], vec[1] + 1))
}
apply(new_locations, 1, test)
new_locations
apply(new_locations, 1, test)
apply(new_locations, 1, test)[1]
dim(apply(new_locations, 1, test))
t(apply(new_locations, 1, test)[1])
t(apply(new_locations, 1, test))
t(apply(new_locations, 1, test))
######## optimization computation
distribute1 <- function(vec){
row_index <- vec[1]
col_index <- vec[2]
cent_value <- supp_imgLR[row_index, col_index]
return(c(supp_imgLR[row_index - 1, col_index - 1] - cent_value,
supp_imgLR[row_index - 1, col_index] - cent_value,
supp_imgLR[row_index - 1, col_index + 1] - cent_value,
supp_imgLR[row_index, col_index - 1] - cent_value,
supp_imgLR[row_index, col_index + 1] - cent_value,
supp_imgLR[row_index + 1, col_index - 1] - cent_value,
supp_imgLR[row_index + 1, col_index] - cent_value,
supp_imgLR[row_index + 1, col_index + 1] - cent_value))
}
t(apply(new_locations, 1, distribute1))
t(apply(new_locations[1:2,], 1, distribute1))
t(apply(new_locations[1,], 1, distribute1))
t(apply(new_locations, 1, test))
;supp_imgLR
supp_imgLR
dim(supp_imgLR)
supp_imgLR[1,]
apply(new_locations, 1, distribute1)
new_locations[1,]
vec <- new_locations[1,]
row_index <- vec[1]
row_index <- vec[1]
row_index <- vec[1]
col_index <- vec[2]
cent_value <- supp_imgLR[row_index, col_index]
c(supp_imgLR[row_index - 1, col_index - 1] - cent_value,
supp_imgLR[row_index - 1, col_index] - cent_value,
supp_imgLR[row_index - 1, col_index + 1] - cent_value,
supp_imgLR[row_index, col_index - 1] - cent_value,
supp_imgLR[row_index, col_index + 1] - cent_value,
supp_imgLR[row_index + 1, col_index - 1] - cent_value,
supp_imgLR[row_index + 1, col_index] - cent_value,
supp_imgLR[row_index + 1, col_index + 1] - cent_value)
> vec <- new_locations[2,]
> vec <- new_locations[2, ]
vec <- new_locations[2, ]
row_index <- vec[1]
row_index <- vec[1]
col_index <- vec[2]
cent_value <- supp_imgLR[row_index, col_index]
cent_value <- supp_imgLR[row_index, col_index]
row_index <- vec[1]
col_index <- vec[2]
cent_value <- supp_imgLR[row_index, col_index]
dim(supp_imgLR)
col_index
HR_locations <- 2 * sampled_locations - 1  # corresponding locations in the imgHR matrix
new_locations <- sampled_locations + 1 # locations in the supp matrix
apply(new_locations, 1, distribute1)
t(apply(new_locations, 1, distribute1))
dim(t(apply(new_locations, 1, distribute1)))
new_locations
distribute1
distribute1(new_locations)
apply(new_locations, 1, distribute1)
featMat[((i - 1) * n_points + 1) : ((i - 1) * n_points + n_points),  , k] <- t(apply(new_locations, 1, distribute1))
i
k
featMat[1:100, , 2]
labMat[((i - 1) * n_points + 1) : ((i - 1) * n_points + n_points),  , k] <- t(apply(HR_locations, 1, distribute2))
distribute2 <- function(vec = HR_locations, cent_value = cent_value){
Hrow_index <- vec[1]
Hcol_index <- vec[2]
return(c(imgHR[Hrow_index, Hcol_index, k] - cent_value,
imgHR[Hrow_index, Hcol_index + 1, k] - cent_value,
imgHR[Hrow_index + 1, Hcol_index, k] - cent_value,
imgHR[Hrow_index + 1, Hcol_index + 1, k] - cent_value))
}
labMat[((i - 1) * n_points + 1) : ((i - 1) * n_points + n_points),  , k] <- t(apply(HR_locations, 1, distribute2))
HR_locations
cent_value <- cent(new_locations)
cent <- function(vec = new_locations) {
row_index <- vec[1]
col_index <- vec[2]
cent_value <- supp_imgLR[row_index, col_index]
return(cent_value)
}
cent_value <- cent(new_locations)
cent_value
distribute2 <- function(vec = HR_locations, cent_value = cent_value){
Hrow_index <- vec[1]
Hcol_index <- vec[2]
return(c(imgHR[Hrow_index, Hcol_index, k] - cent_value,
imgHR[Hrow_index, Hcol_index + 1, k] - cent_value,
imgHR[Hrow_index + 1, Hcol_index, k] - cent_value,
imgHR[Hrow_index + 1, Hcol_index + 1, k] - cent_value))
}
labMat[((i - 1) * n_points + 1) : ((i - 1) * n_points + n_points),  , k] <- t(apply(HR_locations, 1, distribute2))
vec <- HR_locations[1]
vec <- HR_locations[1,]
vec
Hrow_index <- vec[1]
Hcol_index <- vec[2]
c(imgHR[Hrow_index, Hcol_index, k] - cent_value,
imgHR[Hrow_index, Hcol_index + 1, k] - cent_value,
imgHR[Hrow_index + 1, Hcol_index, k] - cent_value,
imgHR[Hrow_index + 1, Hcol_index + 1, k] - cent_value)
labMat[((i - 1) * n_points + 1) : ((i - 1) * n_points + n_points),  , k] <- t(apply(HR_locations, 1, distribute2))
t(apply(HR_locations, 1, distribute2))
apply(HR_locations, 1, distribute2)
HR_locations
k
apply(HR_locations[1:2, ], 1, distribute2)
apply(HR_locations[1, ], 1, distribute2)
Hrow_index
Hcol_index
dim(imgHR)
imgHR[Hrow_index, Hcol_index, k] - cent_value
cent_value
c(imgHR[Hrow_index, Hcol_index, k] - cent_value,
imgHR[Hrow_index, Hcol_index + 1, k] - cent_value,
imgHR[Hrow_index + 1, Hcol_index, k] - cent_value,
imgHR[Hrow_index + 1, Hcol_index + 1, k] - cent_value)
dim(HR_locations)
dim(new_locations)
distribute2 <- function(vec, cent_value = cent_value){
Hrow_index <- vec[1]
Hcol_index <- vec[2]
return(c(imgHR[Hrow_index, Hcol_index, k] - cent_value,
imgHR[Hrow_index, Hcol_index + 1, k] - cent_value,
imgHR[Hrow_index + 1, Hcol_index, k] - cent_value,
imgHR[Hrow_index + 1, Hcol_index + 1, k] - cent_value))
}
apply(HR_locations[1, ], 1, distribute2)
apply(HR_locations, 1, distribute2)
apply(HR_locations, 1, distribute2)
cent <- cent(new_locations)
distribute1 <- function(vec){
row_index <- vec[1]
col_index <- vec[2]
cent_value <- supp_imgLR[row_index, col_index]
return(c(supp_imgLR[row_index - 1, col_index - 1] - cent_value,
supp_imgLR[row_index - 1, col_index] - cent_value,
supp_imgLR[row_index - 1, col_index + 1] - cent_value,
supp_imgLR[row_index, col_index - 1] - cent_value,
supp_imgLR[row_index, col_index + 1] - cent_value,
supp_imgLR[row_index + 1, col_index - 1] - cent_value,
supp_imgLR[row_index + 1, col_index] - cent_value,
supp_imgLR[row_index + 1, col_index + 1] - cent_value))
}
distribute2 <- function(vec, cent_value = cent){
Hrow_index <- vec[1]
Hcol_index <- vec[2]
return(c(imgHR[Hrow_index, Hcol_index, k] - cent_value,
imgHR[Hrow_index, Hcol_index + 1, k] - cent_value,
imgHR[Hrow_index + 1, Hcol_index, k] - cent_value,
imgHR[Hrow_index + 1, Hcol_index + 1, k] - cent_value))
}
apply(HR_locations, 1, distribute2)
t(apply(new_locations, 1, distribute1))
cent <- cent(new_locations)
cent <- function(vec = new_locations) {
row_index <- vec[1]
col_index <- vec[2]
cent_value <- supp_imgLR[row_index, col_index]
return(cent_value)
}
cent <- cent(new_locations)
distribute2 <- function(vec, cent_value = cent){
Hrow_index <- vec[1]
Hcol_index <- vec[2]
return(c(imgHR[Hrow_index, Hcol_index, k] - cent_value,
imgHR[Hrow_index, Hcol_index + 1, k] - cent_value,
imgHR[Hrow_index + 1, Hcol_index, k] - cent_value,
imgHR[Hrow_index + 1, Hcol_index + 1, k] - cent_value))
}
apply(HR_locations, 1, distribute2)
t(apply(HR_locations, 1, distribute2))
source("../lib/feature.R")
tm_feature_train <- NA
if(run.feature.train){
tm_feature_train <- system.time(dat_train <- feature(train_LR_dir, train_HR_dir))
feat_train <- dat_train$feature
label_train <- dat_train$label
}
i = 1
k
k = 1
## Test code ##########
LR_dir <- "../data/train_set/LR/"
HR_dir <- "../data/train_set/HR/"
n_points=1000
# function to locate the samples' corrdinates in the imgLR matrix
locate <- function(n, ncol) {
row <- floor(n/ncol) + 1
col <- n - ncol * (row - 1)
if(col == 0) {
row = row - 1
col = ncol
}
return(c(row, col))
}
distribute1 <- function(vec = new_locations){
row_index <- vec[1]
col_index <- vec[2]
cent_value <- supp_imgLR[row_index, col_index]
return(c(supp_imgLR[row_index - 1, col_index - 1] - cent_value,
supp_imgLR[row_index - 1, col_index] - cent_value,
supp_imgLR[row_index - 1, col_index + 1] - cent_value,
supp_imgLR[row_index, col_index - 1] - cent_value,
supp_imgLR[row_index, col_index + 1] - cent_value,
supp_imgLR[row_index + 1, col_index - 1] - cent_value,
supp_imgLR[row_index + 1, col_index] - cent_value,
supp_imgLR[row_index + 1, col_index + 1] - cent_value))
}
cent <- function(vec = new_locations) {
row_index <- vec[1]
col_index <- vec[2]
cent_value <- supp_imgLR[row_index, col_index]
return(cent_value)
}
distribute2 <- function(vec, cent_value = cent){
Hrow_index <- vec[1]
Hcol_index <- vec[2]
return(c(imgHR[Hrow_index, Hcol_index, k] - cent_value,
imgHR[Hrow_index, Hcol_index + 1, k] - cent_value,
imgHR[Hrow_index + 1, Hcol_index, k] - cent_value,
imgHR[Hrow_index + 1, Hcol_index + 1, k] - cent_value))
}
### load libraries
library("EBImage")
n_files <- length(list.files(LR_dir)) # 1500
### store feature and responses
featMat <- array(NA, c(n_files * n_points, 8, 3))
labMat <- array(NA, c(n_files * n_points, 4, 3))
imgLR <- readImage(paste0(LR_dir,  "img_", sprintf("%04d", i), ".jpg"))
imgHR <- readImage(paste0(HR_dir,  "img_", sprintf("%04d", i), ".jpg"))
LR_nrow <- nrow(imgLR)
LR_ncol <- ncol(imgLR)
HR_nrow <- nrow(imgHR)
HR_ncol <- ncol(imgHR)
### step 1. sample n_points frolm imgLR
sampled_points <- sample(LR_nrow * LR_ncol, n_points)
sampled_locations <- t(sapply(sampled_points, locate, LR_ncol)) # locations in the imgLR matrix
HR_locations <- 2 * sampled_locations - 1  # corresponding locations in the imgHR matrix
new_locations <- sampled_locations + 1 # locations in the supp matrix
# supplement the image matrix
supp_imgLR <- cbind(imgLR[, 1, k], imgLR[, , k], imgLR[, LR_ncol, k])
supp_imgLR <- rbind(cbind(imgLR[1, 1, k], imgLR[1, , k],imgLR[1, LR_ncol, k]),
supp_imgLR, cbind(imgLR[LR_nrow, 1, k], imgLR[LR_nrow, , k],imgLR[LR_nrow, LR_ncol, k]))
featMat[((i - 1) * n_points + 1) : ((i - 1) * n_points + n_points),  , k] <- t(apply(new_locations, 1, distribute1))
center <- cent(new_locations)
labMat[((i - 1) * n_points + 1) : ((i - 1) * n_points + n_points),  , k] <- t(apply(HR_locations, 1, distribute2))
featMat[990:1005, 1]
featMat[990:1005, ,1]
featMat[990:1009, ,1]
### store feature and responses
featMat <- array(NA, c(n_files * n_points, 8, 3))
featMat[1:10, ], 1
featMat[1:10, ,1]
featMat[((i - 1) * n_points + 1) : ((i - 1) * n_points + n_points),  , k] <- t(apply(new_locations, 1, distribute1))
featMat[999:1005, , 1]
center
(HR_locations[1, ][1] + 1) / 2 + 1 == new_locations[1, ][1]
distribute2 <- function(vec, cent_value = cent){
Hrow_index <- vec[1]
Hcol_index <- vec[2]
row2 <- (Hrow_index + 1) / 2 + 1
col2 <- (Hcol_index + 1) / 2 + 1
cent_value <- supp_imgLR[row2, col2]
return(c(imgHR[Hrow_index, Hcol_index, k] - cent_value,
imgHR[Hrow_index, Hcol_index + 1, k] - cent_value,
imgHR[Hrow_index + 1, Hcol_index, k] - cent_value,
imgHR[Hrow_index + 1, Hcol_index + 1, k] - cent_value))
}
labMat[((i - 1) * n_points + 1) : ((i - 1) * n_points + n_points),  , k] <- t(apply(HR_locations, 1, distribute2))
labMat[995:1005, ,1]
source("../lib/feature.R")
tm_feature_train <- NA
if(run.feature.train){
tm_feature_train <- system.time(dat_train <- feature(train_LR_dir, train_HR_dir))
feat_train <- dat_train$feature
label_train <- dat_train$label
}
i
j
k
new_locations
new_locations[1000,]
sampled_locations[1000,]
vec <- c(132, 12)
row_index <- vec[1]
row_index <- vec[1]
col_index <- vec[2]
cent_value <- supp_imgLR[row_index, col_index]
c(supp_imgLR[row_index - 1, col_index - 1] - cent_value,
supp_imgLR[row_index - 1, col_index] - cent_value,
supp_imgLR[row_index - 1, col_index + 1] - cent_value,
supp_imgLR[row_index, col_index - 1] - cent_value,
supp_imgLR[row_index, col_index + 1] - cent_value,
supp_imgLR[row_index + 1, col_index - 1] - cent_value,
supp_imgLR[row_index + 1, col_index] - cent_value,
supp_imgLR[row_index + 1, col_index + 1] - cent_value)
dim(supp_imgLR)
k = 1
i = 1
### load libraries
library("EBImage")
n_files <- length(list.files(LR_dir)) # 1500
### store feature and responses
featMat <- array(NA, c(n_files * n_points, 8, 3))
labMat <- array(NA, c(n_files * n_points, 4, 3))
imgLR <- readImage(paste0(LR_dir,  "img_", sprintf("%04d", i), ".jpg"))
imgHR <- readImage(paste0(HR_dir,  "img_", sprintf("%04d", i), ".jpg"))
LR_nrow <- nrow(imgLR)
LR_ncol <- ncol(imgLR)
HR_nrow <- nrow(imgHR)
HR_ncol <- ncol(imgHR)
### step 1. sample n_points frolm imgLR
sampled_points <- sample(LR_nrow * LR_ncol, n_points)
sampled_locations <- t(sapply(sampled_points, locate, LR_ncol)) # locations in the imgLR matrix
HR_locations <- 2 * sampled_locations - 1  # corresponding locations in the imgHR matrix
new_locations <- sampled_locations + 1 # locations in the supp matrix
# supplement the image matrix
supp_imgLR <- cbind(imgLR[, 1, k], imgLR[, , k], imgLR[, LR_ncol, k])
supp_imgLR <- rbind(cbind(imgLR[1, 1, k], imgLR[1, , k],imgLR[1, LR_ncol, k]),
supp_imgLR, cbind(imgLR[LR_nrow, 1, k], imgLR[LR_nrow, , k],imgLR[LR_nrow, LR_ncol, k]))
featMat[((i - 1) * n_points + 1) : ((i - 1) * n_points + n_points),  , k] <- t(apply(new_locations, 1, distribute1))
labMat[((i - 1) * n_points + 1) : ((i - 1) * n_points + n_points),  , k] <- t(apply(HR_locations, 1, distribute2))
featMat[999:1002, , 1]
k = 2
# supplement the image matrix
supp_imgLR <- cbind(imgLR[, 1, k], imgLR[, , k], imgLR[, LR_ncol, k])
supp_imgLR <- rbind(cbind(imgLR[1, 1, k], imgLR[1, , k],imgLR[1, LR_ncol, k]),
supp_imgLR, cbind(imgLR[LR_nrow, 1, k], imgLR[LR_nrow, , k],imgLR[LR_nrow, LR_ncol, k]))
featMat[((i - 1) * n_points + 1) : ((i - 1) * n_points + n_points),  , k] <- t(apply(new_locations, 1, distribute1))
labMat[((i - 1) * n_points + 1) : ((i - 1) * n_points + n_points),  , k] <- t(apply(HR_locations, 1, distribute2))
source("../lib/feature.R")
tm_feature_train <- NA
if(run.feature.train){
tm_feature_train <- system.time(dat_train <- feature(train_LR_dir, train_HR_dir))
feat_train <- dat_train$feature
label_train <- dat_train$label
}
i
k
dim(imgLR)
head(new_locations)
dim(new_locations)
dim(imgLR)
dim(supp_imgLR)
imgLR[, 1, k]
i
### store feature and responses
featMat <- array(NA, c(n_files * n_points, 8, 3))
featMat
### store feature and responses
featMat <- array(NA, c(n_files * n_points, 8, 3))
featMat
labMat <- array(NA, c(n_files * n_points, 4, 3))
imgLR <- readImage(paste0(LR_dir,  "img_", sprintf("%04d", i), ".jpg"))
imgHR <- readImage(paste0(HR_dir,  "img_", sprintf("%04d", i), ".jpg"))
LR_nrow <- nrow(imgLR)
LR_ncol <- ncol(imgLR)
HR_nrow <- nrow(imgHR)
HR_ncol <- ncol(imgHR)
k
k = 1
### step 1. sample n_points frolm imgLR
sampled_points <- sample(LR_nrow * LR_ncol, n_points)
sampled_locations <- t(sapply(sampled_points, locate, LR_ncol)) # locations in the imgLR matrix
sampled_locations
HR_locations <- 2 * sampled_locations - 1  # corresponding locations in the imgHR matrix
HR_locations
# supplement the image matrix
supp_imgLR <- cbind(imgLR[, 1, k], imgLR[, , k], imgLR[, LR_ncol, k])
supp_imgLR <- rbind(cbind(imgLR[1, 1, k], imgLR[1, , k],imgLR[1, LR_ncol, k]),
supp_imgLR, cbind(imgLR[LR_nrow, 1, k], imgLR[LR_nrow, , k],imgLR[LR_nrow, LR_ncol, k]))
featMat[((i - 1) * n_points + 1) : ((i - 1) * n_points + n_points),  , k] <- t(apply(new_locations, 1, distribute1))
featMat[995:1005, , 1]
source("../lib/feature.R")
tm_feature_train <- NA
if(run.feature.train){
tm_feature_train <- system.time(dat_train <- feature(train_LR_dir, train_HR_dir))
feat_train <- dat_train$feature
label_train <- dat_train$label
}
dim(supp_imgLR)
row_index
k = 3
# supplement the image matrix
supp_imgLR <- cbind(imgLR[, 1, k], imgLR[, , k], imgLR[, LR_ncol, k])
# supplement the image matrix
supp_imgLR <- cbind(imgLR[, 1, k], imgLR[, , k], imgLR[, LR_ncol, k])
supp_imgLR <- rbind(cbind(imgLR[1, 1, k], imgLR[1, , k],imgLR[1, LR_ncol, k]),
supp_imgLR, cbind(imgLR[LR_nrow, 1, k], imgLR[LR_nrow, , k],imgLR[LR_nrow, LR_ncol, k]))
featMat[((i - 1) * n_points + 1) : ((i - 1) * n_points + n_points),  , k] <- t(apply(new_locations, 1, distribute1))
labMat[((i - 1) * n_points + 1) : ((i - 1) * n_points + n_points),  , k] <- t(apply(HR_locations, 1, distribute2))
labMat[1:100, ,3]
labMat[999:1002, ,3]
